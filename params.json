{"name":"Sash","tagline":"Secure AWS Shell","body":"__Sash is a Secure Shell wrapper which uses `aws-cli` to find an instance's IP and PEM file by its name__\r\nsash\r\n====\r\n\r\nPrerequisites\r\n-------------\r\n\r\n1. Install [AWS Unified CLI](https://github.com/aws/aws-cli)\r\n2. Make sure you have `AWS_ACCESS_KEY`, `AWS_SECRET_KEY` and `AWS_DEFAULT_REGION` set in your environment\r\n3. Put all your PEM files under `~/.aws`\r\n\r\nInstallation\r\n------------\r\n\r\n**Ubuntu/Linux**\r\n\r\n    git clone git@github.com:uriagassi/sash.git\r\n    cd sash\r\n    make install\r\n    echo \"source ~/.local/bin/sash.sh\" >> ~/.bashrc\r\n    source ~/.bashrc\r\n    \r\n**Mac**\r\n\r\n    git clone git@github.com:uriagassi/sash.git\r\n    cd sash\r\n    make install\r\n    echo \"source ~/.local/bin/sash.sh\" >> ~/.bash_profile\r\n    echo \"export LC_ALL=en_US.UTF-8\" >> ~/.bash_profile\r\n    echo \"export LANG=en_US.UTF-8\" >> ~/.bash_profile\r\n    source ~/.bash_profile\r\n    \r\n\r\nUsage\r\n-----\r\n\r\n**SSH Connect**\r\n\r\n    sash my-machine-name\r\n    \r\nAlso supports auto-complete (press `TAB` to get available machine names)\r\n\r\nAny extra parameters will be passed to the `ssh` command:\r\n\r\n    > sash my-machine-name -A\r\n    + ssh -i ~/.aws/my.pem ubuntu@214.35.22.10 -A\r\n\r\n\r\nTo refresh the machine name cache for the autocomplete run\r\n\r\n    clear_sash\r\n\r\n**Using VPN**\r\n\r\nIf you use VPN to connect to your instances, which means you connect via the machines private IP, you should set the environment variable `SASH_USE_VPN` to `true` - add the following line to `~/.profile`:\r\n\r\n    export SASH_USE_VPN=true\r\n    \r\nThis will configure the API to connect via private IPs instead of public IPs.\r\n\r\n**Multiple instances with the same name**\r\n\r\nIf there are multiple instances with the same name, the first instance returned will be selected. If you want to select another, you can do it\r\nby indicating the instance's appearance index (starting from one) as a second parameter.\r\n\r\nFor example:\r\n\r\n    sash my-machine-name 3\r\n\r\nwill connect to the third instance listed with the name `my-machine-name`.\r\n\r\nTo see which instances are listed, and in what order, add `list` as the second parameter:\r\n\r\n    > sash my-machine-name list\r\n    1) my-machine-name (214.35.22.10)\r\n    2) my-machine-name (214.35.22.11)\r\n    3) my-machine-name (214.35.22.12)\r\n\r\n**Using wildcards**\r\n\r\nYou can call `sash` with wildcards (`*`). This will select all instances matching the pattern, and connect to the one in the index indicated\r\n(or the first by default).\r\n\r\n    > sash my-*-name list\r\n    1) my-new-machine-name (214.35.23.55)\r\n    2) my-old-machine-name (214.32.20.10)\r\n    3) my-machine-name (214.32.22.10)\r\n\r\n    > sash my-*-name 2\r\n    Connecting to my-old-machine-name (214.32.20.10)\r\n    ...\r\n    \r\n**Connect to multiple machines at once**\r\n\r\nIf you have [CSSH](http://www.unixmen.com/clusterssh-manage-multiple-ssh-sessions-on-linux/) (or [tmux-cssh](https://github.com/dennishafemann/tmux-cssh) for OSX) installed, calling `sash` with `all` flag will connect to all machines at once: \r\n\r\n    > sash my-machine-name all\r\n    Connecting to 3 machines (214.35.22.10 214.35.22.11 214.35.22.12)\r\n\r\nAny extra parameters will be passed to the `cssh` command. To pass arguments to the underlying `ssh` - pass it under `--ssh_args` as a first argument:\r\n\r\n    > sash my-machine-name --ssh_args -A -p 44\r\n    + cssh -o '-i ~/.aws/my.pem -A' -p 44 ubuntu@214.35.22.10 ubuntu@...\r\n\r\n*Note:* All machines are expected to have the same PEM file to connect correctly\r\n\r\n**Upload/download files**\r\n\r\nAdd the keyword `upload` to upload files to the remote machine. The next parameter should be the file to upload, and the one after that the target directory (if not declared - defaults to `~`):\r\n\r\n    > sash my-machine-name upload my_file.json\r\n    + scp -i ~/.aws/my.pem my_file.json ubuntu@214.35.22.10:/home/ubuntu\r\n\r\n    > sash my-machine-name upload my_file.json /tmp/my_directory\r\n    + scp -i ~/.aws/my.pem my_file.json ubuntu@214.35.22.10:/tmp/my_directory\r\n\r\nUse the keyword `download` to download files from the remote machine (target defaults to `.`):\r\n\r\n    > sash my-machine-name download my_file.json\r\n    + scp -i ~/.aws/my.pem ubuntu@214.35.22.10:my_file.json .\r\n\r\nOptional parameters of machine index or `all` are supported for patterns matching more than one machine:\r\n\r\n    > sash my-machine-name upload all my_file.json\r\n    + scp -i ~/.aws/my.pem my_file.json ubuntu@214.35.22.10:/home/ubuntu\r\n    + scp -i ~/.aws/my.pem my_file.json ubuntu@214.35.22.11:/home/ubuntu\r\n    + scp -i ~/.aws/my.pem my_file.json ubuntu@214.35.22.12:/home/ubuntu\r\n\r\n**Machine usernames**\r\n\r\nSash assumes the username on your machines is `ubuntu`. To change that globally, set the `SASH_DEFAULT_USER` environment variable.\r\n\r\nIf you have a machine whose username is _not_ the default username, you can change it by using the `set_user` command:\r\n\r\n    sash my-machine-name set_user ec2_user\r\n\r\nThis command uses EC2 Tags to set a Tag to that machine (named `SashUserName`) whose value will be used for that specific machine. To unset it, use `unset_user` command:\r\n\r\n    sash my-machine-name unset_user\r\n\r\n**Find machine name from private IP**\r\n\r\n[Newrelic](http://www.newrelic.com)'s server monitoring names the instances it monitors by their private IPs by default (`ip-10-0-0-12`), which is practically useless. \r\nThis API finds the instance which has this private IP, and returns the instance's name tag:\r\n\r\n    private_dns_to_name ip-10-XXX-XXX-XXX\r\n    \r\nEnjoy!\r\n","google":"UA-35327454-1","note":"Don't delete this file! It's used internally to help with page regeneration."}